{"version":3,"sources":["webpack:///./node_modules/@nehalist/gatsby-theme-nehalem/src/components/subheader/index.tsx","webpack:///./node_modules/@nehalist/gatsby-theme-nehalem/src/components/post-grid/index.tsx","webpack:///./node_modules/@nehalist/gatsby-theme-nehalem/src/components/card/style.tsx","webpack:///./node_modules/@nehalist/gatsby-theme-nehalem/src/components/card/index.tsx","webpack:///./node_modules/@nehalist/gatsby-theme-nehalem/src/pages/archive.tsx"],"names":["StyledSubheader","styled","div","withConfig","displayName","componentId","props","backgroundColor","textColor","SubheaderTitle","h1","SubheaderSubtitle","small","Subheader","_ref","title","subtitle","React","createElement","Container","PostGrid","posts","Grid","map","post","index","Card","frontmatter","path","featuredImage","childImageSharp","content","excerpt","key","meta","time","created","timePretty","createdPretty","tag","tags","length","StyledCard","Link","StyledArticle","article","Theme","breakpoints","sm","FeaturedImage","Img","halfImage","CardContent","section","compact","CardMeta","CardTitle","h2","style","children","to","fixed","sizes","Fragment","dateTime","dangerouslySetInnerHTML","__html","ArchivePage","data","location","allPosts","edges","node","Layout","bigHeader","SEO","type"],"mappings":"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","file":"component---node-modules-nehalist-gatsby-theme-nehalem-src-pages-archive-tsx-c30ebb77dc2c43c7dd5a.js","sourcesContent":["import React, {FunctionComponent} from \"react\";\nimport styled from \"styled-components\";\nimport {Container} from \"../common\";\n\ninterface SubheaderProps {\n  title: string;\n  subtitle?: string;\n  backgroundColor?: string;\n  textColor?: string;\n}\n\nconst StyledSubheader = styled.div<Pick<SubheaderProps, 'backgroundColor' | 'textColor'>>`\n  background-color: ${props => props.backgroundColor ? props.backgroundColor : '#000'};\n  color: ${props => props.textColor ? props.textColor : '#fff'};\n  display: flex;\n  align-items: center;\n  height: 90px;\n  margin-bottom: 30px;\n`;\n\nconst SubheaderTitle = styled.h1`\n  font-size: 1.2em;\n  font-weight: bold;\n  color: #fff;\n  margin: 0;\n  line-height: 1em;\n`;\n\nconst SubheaderSubtitle = styled.small`\n  font-weight: normal;\n  display: block;\n  opacity: .9;\n`;\n\nconst Subheader: FunctionComponent<SubheaderProps> = ({title, subtitle, backgroundColor, textColor}) => (\n  <StyledSubheader backgroundColor={backgroundColor} textColor={textColor}>\n    <Container>\n      <SubheaderTitle>\n        {title}\n        <SubheaderSubtitle>{subtitle}</SubheaderSubtitle>\n      </SubheaderTitle>\n    </Container>\n  </StyledSubheader>\n);\n\nexport default Subheader;\n","import React, {FunctionComponent} from \"react\";\nimport {Post} from \"../../utils/models\";\nimport {Grid} from \"../common\";\nimport {Card} from \"../card\";\n\ninterface PostGridProps {\n  posts: Post[];\n}\n\nconst PostGrid: FunctionComponent<PostGridProps> = ({posts}) => (\n  <Grid>\n    {posts.map((post, index) => (\n      <Card\n        title={post.frontmatter.title}\n        path={post.frontmatter.path}\n        featuredImage={post.frontmatter.featuredImage ? post.frontmatter.featuredImage.childImageSharp : null}\n        content={post.frontmatter.excerpt}\n        key={index}\n        meta={\n          {\n            time: post.frontmatter.created,\n            timePretty: post.frontmatter.createdPretty,\n            tag: post.frontmatter.tags.length > 0 ? post.frontmatter.tags[0] : null,\n          }\n        }\n      />\n    ))}\n  </Grid>\n);\n\nexport default PostGrid;\n","import styled from \"styled-components\";\nimport {Link} from \"gatsby\";\nimport Theme from \"../../styles/theme\";\nimport Img from \"gatsby-image\";\nimport {CardProps} from \"./index\";\n\nexport const StyledCard = styled(Link)`\n  display: block;\n  background-color: #fff;\n  border-radius: 3px;\n  box-shadow: 0 1px 1px #e6e6e6, 0 2px 4px #e6e6e6;\n  transition: .5s all;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n\n  &:hover {\n    transform: translate3d(0, -5px, 0);\n    box-shadow: 0 1px 1px #ccc, 0 4px 4px #ccc;\n  }\n`;\n\nexport const StyledArticle = styled.article`\n  display: inline-block;\n  width: 100%;\n\n  @media (max-width: ${Theme.breakpoints.sm}) {\n    grid-area: unset !important;\n  }\n`;\n\nexport const FeaturedImage = styled(Img)<Pick<CardProps, 'halfImage'>>`\n  background-position: center;\n  background-size: cover;\n  max-width: 100%;\n  border-top-left-radius: 3px;\n\n  ${props => props.halfImage ? `\n    width: 50%;\n    float: left;\n    margin-right: 30px;\n    height: 320px;\n    border-bottom-left-radius: 3px;\n\n    @media (max-width: ${Theme.breakpoints.sm}) {\n      width: 100%;\n      float: none;\n      height: 190px;\n    }\n  ` : `\n    height: 190px;\n    max-height: 190px;\n    width: 100%;\n    border-top-right-radius: 3px;\n  `};\n`;\n\nexport const CardContent = styled.section<{ compact: boolean }>`\n  padding: ${props => props.compact ? '10px' : '40px'};\n\n  p {\n    margin: 15px 0;\n  }\n\n  h2 {\n    font-size: 1.2em;\n  }\n`;\n\nexport const CardMeta = styled.section`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 8px;\n  font-size: .8em;\n  opacity: .8;\n  line-height: 1em;\n`;\n\nexport const CardTitle = styled.h2`\n  margin: 0;\n  padding: 0;\n`;\n","import React, {CSSProperties, FunctionComponent, ReactNode} from \"react\";\nimport {CardContent, CardMeta, CardTitle, FeaturedImage, StyledArticle, StyledCard} from \"./style\";\n\nexport interface CardProps {\n  title?: string;\n  path: string;\n  featuredImage?: any;\n  content?: string;\n  meta?: {\n    time: string;\n    timePretty: string;\n    tag: string | null;\n  };\n  halfImage?: boolean;\n  compact?: boolean;\n  style?: CSSProperties;\n  children?: ReactNode;\n}\n\nexport const Card: FunctionComponent<CardProps> = ({\n                                                     title,\n                                                     meta,\n                                                     path,\n                                                     featuredImage,\n                                                     content,\n                                                     halfImage = false,\n                                                     compact = false,\n                                                     style,\n                                                     children,\n                                                   }) => (\n  <StyledArticle style={style}>\n    <StyledCard to={path}>\n      {/* TODO: Oh boy... */}\n      {(featuredImage && featuredImage.fixed) &&\n      <FeaturedImage fixed={featuredImage.fixed} halfImage={halfImage}/>\n      }\n      {(featuredImage && featuredImage.sizes) &&\n      <FeaturedImage sizes={featuredImage.sizes} halfImage={halfImage}/>\n      }\n      <CardContent compact={compact}>\n        {children}\n        <header>\n          {meta &&\n          <CardMeta>\n            {meta.tag && <>{meta.tag}</>}\n            {meta.time &&\n            <time dateTime={meta.time}>{meta.timePretty}</time>\n            }\n          </CardMeta>\n          }\n          {title &&\n          <CardTitle>{title}</CardTitle>\n          }\n        </header>\n        {content &&\n        <p dangerouslySetInnerHTML={{__html: content}}/>\n        }\n      </CardContent>\n    </StyledCard>\n  </StyledArticle>\n);\n","import React, {FunctionComponent} from \"react\";\nimport Layout from \"../components/layout\";\nimport {graphql} from \"gatsby\";\nimport {Post} from \"../utils/models\";\nimport Subheader from \"../components/subheader\";\nimport SEO from \"../components/seo\";\nimport PostGrid from \"../components/post-grid\";\n\ninterface ArchivePageProps {\n  data: {\n    allPosts: {\n      edges: Array<{ node: Post }>;\n    };\n  };\n  location: Location;\n}\n\nconst ArchivePage: FunctionComponent<ArchivePageProps> = ({data, location}) => {\n  const posts = data.allPosts.edges.map(node => node.node) as Post[];\n\n  return (\n    <Layout bigHeader={false}>\n      <SEO\n        location={location}\n        title={`Archive`}\n        type={`Series`}\n      />\n      <Subheader title={`Archive`} subtitle={`${posts.length} posts`}/>\n      <PostGrid posts={posts} />\n    </Layout>\n  );\n};\n\nexport default ArchivePage;\n\nexport const query = graphql`\n  query {\n    allPosts: allMarkdownRemark(\n        filter: { fileAbsolutePath: { regex: \"/(posts)/.*\\\\\\\\.md$/\" } }\n        sort: { fields: frontmatter___created, order: DESC }\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              path\n              tags\n              excerpt\n              created\n              createdPretty: created(formatString: \"DD MMMM, YYYY\")\n              featuredImage {\n                childImageSharp {\n                  sizes(maxWidth: 500, quality: 100) {\n                    base64\n                    aspectRatio\n                    src\n                    srcSet\n                    sizes\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n  }\n`;\n"],"sourceRoot":""}